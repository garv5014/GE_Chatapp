version: "3.9"

services:
  postgres:
    image: postgres:latest
    container_name: ge_chat_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - /home/garrett/chatdata/data:/var/lib/postgresql/data
      - ../../chatdb/initscripts:/docker-entrypoint-initdb.d
    restart: always

  websocket:
    container_name: websocket
    build:
      context: ../../
      dockerfile: SignalR/Dockerfile
     
  ge_chatapp:
    container_name: ge_chatapp
    user: 0:0
    build:
      context: ../../
      dockerfile: GE_Chatapp/GE_Chatapp/Dockerfile
    entrypoint:
        - /bin/bash
        - -c
        - |
          su app
          dotnet GE_Chatapp.dll
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      - ApiBaseAddress=https://gechatapp.duckdns.org:1360/api
      - CollectorURL=http://ge_otel_collector:4317
      - ASPNETCORE_ENVIRONMENT=Development
      - FileStoreAPIAddress=https://gechatapp.duckdns.org:1360/api
    restart: always 

  ge_redundancyservice:
    container_name: ge_redundancyservice
    build:
      context: ../../
      dockerfile: RedundancyService/Dockerfile
    environment:
      - ConnectionString=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      - FILE_SERIVCE_NAMES=ge_fileservice-1,ge_fileservice-2,ge_fileservice-3
      - SLEEP_INTERVAL=30
      - COLLECTOR_URL=http://ge_otel_collector:4317
    depends_on:
      - ge_chatapp
      - ge_fileservice-1
      - ge_fileservice-2
      - ge_fileservice-3

  ge_fileservice-1: 
    user: 0:0
    container_name: ge_fileservice-1
    entrypoint:
        - /bin/bash
        - -c
        - |
          chown -R 1000:1000 /app/images
          su app
          dotnet FileAPI.dll
    build:
      context: ../../
      dockerfile: FileAPI/Dockerfile
    restart: always
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      - FileAPIOptions__CompressImages=true
      - FileAPIOptions__APIDelayInSeconds=1
      - CollectorURL=http://ge_otel_collector:4317
      - FileAPIOptions__ServiceName=ge_fileservice-1
    volumes:
      - /home/garrett/images/service_1:/app/images

  ge_fileservice-2: 
    user: 0:0
    container_name: ge_fileservice-2
    entrypoint:
        - /bin/bash
        - -c
        - |
          chown -R 1000:1000 /app/images
          su app
          dotnet FileAPI.dll
    build:
      context: ../../
      dockerfile: FileAPI/Dockerfile
    restart: always
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      - FileAPIOptions__CompressImages=true
      - FileAPIOptions__APIDelayInSeconds=1
      - CollectorURL=http://ge_otel_collector:4317
      - FileAPIOptions__ServiceName=ge_fileservice-2
    volumes:
      - /home/garrett/images/service_2:/app/images

  ge_fileservice-3: 
    user: 0:0
    container_name: ge_fileservice-3
    entrypoint:
        - /bin/bash
        - -c
        - |
          chown -R 1000:1000 /app/images
          su app
          dotnet FileAPI.dll
    build:
      context: ../../
      dockerfile: FileAPI/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      - FileAPIOptions__CompressImages=true
      - FileAPIOptions__APIDelayInSeconds=1
      - ASPNETCORE_ENVIRONMENT=Development
      - FileAPIOptions__ServiceName=ge_fileservice-3
    volumes:
      - /home/garrett/images/service_3:/app/images

  swag:
    image: lscr.io/linuxserver/swag
    container_name: ge_chatapp_proxy
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Denver
      - URL=gechatapp.duckdns.org
      - VALIDATION=duckdns
      - DUCKDNSTOKEN=${DUCKDNSTOKEN}
      - STAGING=false
    volumes:
      - /home/garrett/data/swag:/config
      - ./swag-default.conf:/config/nginx/site-confs/default.conf
    ports:
      - 0.0.0.0:1360:443
    restart: always

  cache:
    image: bitnami/redis
    container_name: chatappcache
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"

  ge_otel_collector:
    image: otel/opentelemetry-collector-contrib
    container_name: ge_otel_collector
    command: ["--config=/etc/otelcol-contrib/config.yml", "${OTELCOL_ARGS}"]
    volumes:
      - ./configs/otel-collector-config.yml:/etc/otelcol-contrib/config.yml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension 

  ge_zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: ge_zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mem
    # ports:
    #   # Port used for the Zipkin UI and HTTP Api
    #   - 9411:9411

  ge_prometheus:
    image: prom/prometheus
    container_name: ge_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # ports:
    #   - 9090:9090
    restart: always
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml

  ge_grafana:
    build:
      context: .
      dockerfile: ./Dockerfiles/grafana/Dockerfile
    user: "1001"
    container_name: ge_grafana
    # ports:
      # - 3000:3000
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./configs/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/default.yml
      - ./dashboards:/var/lib/grafana/dashboards
      - ./configs/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./configs/grafana.ini:/etc/grafana/grafana.ini

  ge_loki:
    image: grafana/loki:2.9.0
    command: -config.file=/etc/loki/local-config.yml
    container_name: ge_loki
    restart: always
    volumes:
     - ./configs/loki.yml:/etc/loki/local-config.yml
    # ports:
    #   - "3100:3100"
volumes:
  images_store:  