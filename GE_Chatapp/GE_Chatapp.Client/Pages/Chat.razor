@page "/chat"
@inject IChatService ChatService
@rendermode InteractiveWebAssembly
@using Chatapp.Shared
@using Chatapp.Shared.Interfaces
@using Chatapp.Shared.Services
@using Chatapp.Shared.Entities

<h1>Chat Room</h1>

    @if (messages == null)
    {
        <p>No Messages Yet</p>
    }
else

{
<ul class="list-unstyled">
        @foreach (var message in messages)
        {
            <li class="m-0 fs-6">@message.CreatedAt.ToShortTimeString()</li>
            <li class="border border-2 rounded-3 p-2 mb-3">@message.Username: @message.MessageText</li>
        }
</ul>
    }

<div>
    <input type="text" @bind="UserName" placeholder="Your name" />
    <input type="text" @bind="Message" placeholder="Type a message" />
    <button @onclick=@(() => SendMessage() )>Send</button>
</div>

@code {
    public string Message { get; set; } = "";
    public string UserName { get; set; } = "";
    List<Message> messages { get; set; } = new List<Message>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing chat");
        messages = await ChatService.GetMessagesAsync();
        Console.WriteLine("here are the messages", messages);
    }

    public async Task SendMessage()
    {
        Console.WriteLine("Sending message");
        if (!string.IsNullOrWhiteSpace(Message) && !string.IsNullOrWhiteSpace(UserName))
        {
            var chatMessage = new Message { MessageText = Message, Username = UserName, CreatedAt = DateTime.Now };
            await ChatService.SendMessageAsync(chatMessage);
            Message = ""; // Clear the message field after sending
            await OnInitializedAsync();
        }
    }

}