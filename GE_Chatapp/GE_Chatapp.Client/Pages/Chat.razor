@page "/"
@inject IChatService ChatService
@inject NavigationManager Navigation
@inject SignalREnv SignalRENV
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client
@using Chatapp.Shared
@using Chatapp.Shared.Interfaces
@using Chatapp.Shared.Services
@using Chatapp.Shared.Entities
@using Chatapp.Shared.Simple_Models
@using System.Timers
@using System.Text.Json

<h1>Chat Room</h1>

<div class="d-flex flex-column flex-row-reverse container" style="height: 500px">
  <div class="overflow-scroll" style="height: 90%">
    <ul class="list-unstyled">
      @if (chatMessages == null)
      {
        <p>No Messages Yet</p>
      }
      else
      {
        @foreach (var message in chatMessages)
        {
          <li class="w-25">
            <div class="row">
              <p class="col-auto my-0 fs-6 fw-bold">@message.Message.Username</p>
                <p class="col-auto my-0 fs-6">@message.Message.CreatedAt.ToShortTimeString()</p>
            </div>
            <div class="border border-2 rounded-3 p-2 mb-3 container">
              <p >@message.Message.MessageText</p>
            @if (message.Images.Count() > 0)
            {
              <div class="row">
                @foreach ( var image in message.Images)
                {    
                    <img src="@image" alt="photo" class="col-auto p-3 img-fluid" />     
                }
              </div>
            }
            </div>
          </li>
        }
        @foreach (var user in typingUsers)
        {
          @if(user.Value)
          {           
            <li class="w-25">
              <p class="col-auto my-0 fs-6 fw-bold">@user.Key</p>
              <p class="col-auto my-0 fs-6">Typing...</p>
            </li>
          }
        }
      }
    </ul>
  </div>

    <div class='text-center container '>
        <input type="text" @bind="UserName" placeholder="Your name" class="form-control pt-1 pb-1" />
        <input type="text" @bind="Message" placeholder="Type a message" class="form-control pb-1" disabled="@isDisabled" @oninput="onMessageChange" />
        <div class="row">
            <div class="col-9">
                <InputFile OnChange="@LoadFiles" multiple accept=".png" class="form-control"/>
            </div>
            <div class="col-3">
                <button @onclick=@(() => SendMessage() ) class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</div>


@code {
    public string Message { get; set; } = "";
    public string UserName { get; set; } = "";
    public bool isDisabled => string.IsNullOrWhiteSpace(UserName);
    public Timer? typingTimer { get; set; }
    public Guid ClientID { get; set; } 
    public int EventCount { get; set; }
    public Dictionary<string, int> VectorClock = new Dictionary<string, int>();

    Dictionary<string, bool> typingUsers { get; set; } = new Dictionary<string, bool>();
    List<MessageWithImages> chatMessages { get; set; } = new List<MessageWithImages>();
    List<string> dataURIs { get; set; } = new List<string>();
    private HubConnection? hubConnection;

    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        dataURIs.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > 100000000)
            {
                Console.WriteLine("file too big");
            }
            else {
                var fileURI = await ConvertToBase64(file);
                dataURIs.Add(fileURI);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        // check if clientID already exists in local storage
        if (await GetFromLocalStorage("client_id") != null && await GetFromLocalStorage("vector_clock") != null )
        {
            ClientID = Guid.Parse(await GetFromLocalStorage("client_id"));

            EventCount = int.Parse(await GetFromLocalStorage("event_count"));

            string vectorClockFromStorage = await GetFromLocalStorage("vector_clock");
            VectorClock = JsonSerializer.Deserialize<Dictionary<string, int>>(vectorClockFromStorage) ?? throw new Exception("No vector clock in local storage");
        }
        else
        {
            ClientID = Guid.NewGuid();

            EventCount = 0;
            VectorClock.Add(ClientID.ToString(), EventCount);

            string serializedVectorClock = JsonSerializer.Serialize(VectorClock);

            await SaveToLocalStorage("client_id", ClientID.ToString());
            await SaveToLocalStorage("event_count", EventCount.ToString());
            await SaveToLocalStorage("vector_clock", serializedVectorClock);
        }
    }

    protected override async Task OnInitializedAsync()
    {

        Console.WriteLine("Initializing chat");
        chatMessages = await ChatService.GetMessagesAsync();
        Console.WriteLine("here are the messages", chatMessages);

        hubConnection = new HubConnectionBuilder()
        .WithUrl(SignalRENV.chatHubURL)
        .Build();

        Console.WriteLine($"Here is the hub url {SignalRENV.chatHubURL}");

        hubConnection.On<string>("ReceiveStartTyping", (user) =>
        {
            if (typingUsers.ContainsKey(user))
            {
                typingUsers[user] = true;
            }
            else
            {
                typingUsers.Add(user, true);
            }
            StateHasChanged();
        });

        hubConnection.On<string>("ReceiveStopTyping", (user) =>
        {
            if (typingUsers.ContainsKey(user))
            {
                typingUsers[user] = false;
            }
            StateHasChanged();
        });

        hubConnection.On("ReceiveUpdateMessages", async () =>
        {
            var newMessages = await ChatService.GetMessagesAfterAsync(chatMessages.Last().Message.CreatedAt);
            chatMessages.AddRange(newMessages);
            int messagesMax = newMessages.Max(m => m.EventCount);
            EventCount = Math.Max(messagesMax, EventCount);
            await IncrementEventCounter();

            await UpdateVectorClock(newMessages);
            SortChatMessages();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage");
        }
        SortChatMessages();
    }

    private async Task stopTyping()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StopTyping", UserName);
        }
        typingTimer?.Stop();
    }

    async Task onMessageChange(ChangeEventArgs e)
    {
        typingTimer?.Dispose();
        typingTimer = new Timer(1000);

        typingTimer.Elapsed += async (_, _) =>
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("StopTyping", UserName);
            }
            await stopTyping();

        };
        typingTimer?.Start();
        Message = e.Value?.ToString() ?? "";
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StartTyping", UserName);
        }

    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async Task SendMessage()
    {
        Console.WriteLine("Sending message");

        if ((!string.IsNullOrWhiteSpace(Message) || dataURIs.Count > 0 ) && !string.IsNullOrWhiteSpace(UserName) )
        {
            await IncrementEventCounter();
            VectorClock[ClientID.ToString()]++;
            string serializedVectorClock = JsonSerializer.Serialize(VectorClock);
            await SaveToLocalStorage("vector_clock", serializedVectorClock);

            var chatMessage = new MessageWithImages {
                Message = new Message {
                    MessageText = Message,
                    Username = UserName,
                    CreatedAt = DateTime.Now,
                    Clientid = ClientID.ToString(),
                    EventCount = EventCount,
                    VectorDict = JsonSerializer.Serialize(VectorClock)
                },
                Images = dataURIs
            };

            await ChatService.SendMessageAsync(chatMessage);
            Message = ""; // Clear the message field after sending
            dataURIs.Clear();

            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("UpdateMessages");
            }
        }
    }

    public async Task<string> ConvertToBase64(IBrowserFile file)
    {
        var format = "image/png"; // Adjust the format as necessary, or dynamically based on the file
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var base64String = Convert.ToBase64String(memoryStream.ToArray());
        return $"data:{format};base64,{base64String}";
    }

    private async Task SaveToLocalStorage(string key, string value)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
    }

    private async Task<string> GetFromLocalStorage(string key)
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
    }

    private async Task RemoveFromLocalStorage(string key)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
    }

    private async Task IncrementEventCounter()
    {
        EventCount++;
        await SaveToLocalStorage("event_count", EventCount.ToString());
    }

    private async Task UpdateVectorClock(List<MessageWithImages> messages)
    {
        foreach (MessageWithImages message in messages)
        {
            if (message.Message.VectorDict is not null)
            {
                Dictionary<string, int> deserializedVectorClock = JsonSerializer.Deserialize<Dictionary<string, int>>(message.Message.VectorDict) ?? new Dictionary<string, int>();

                foreach (var vectorKey in deserializedVectorClock.Keys)
                {
                    if (VectorClock.ContainsKey(vectorKey))
                    {
                        VectorClock[vectorKey] = Math.Max(VectorClock[vectorKey], deserializedVectorClock[vectorKey]);
                    }
                    else
                    {
                        VectorClock[vectorKey] = deserializedVectorClock[vectorKey];
                    }
                }
            }
        }

        VectorClock[ClientID.ToString()]++;
        string serializedVectorClock = JsonSerializer.Serialize(VectorClock);
        await SaveToLocalStorage("vector_clock", serializedVectorClock);
    }

    private void SortChatMessages()
    {
        chatMessages = chatMessages.OrderBy(m => m, new MessageWithImagesComparer())
        .ThenBy(m=> m.EventCount)
        .ThenBy(m => m.ClientId)
        .ThenBy(m => m.Message.CreatedAt)
        .ToList();
    }
}